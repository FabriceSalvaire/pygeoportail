@startuml

title Qt Location - Class Diagram


class QGeoTiledMapOsm {
}
QGeoTiledMapOsm <-up- QGeoTiledMap


class QGeoTiledMap {
 coordinateToItemPosition()
 itemPositionToCoordinate()
 prefetchData()
 prefetchTiles()
 requestManager() -> QGeoTileRequestManager
 resized()
 tileCache() -> QGeoTileCache
 updateSceneGraph(QSGNode)
 updateTile(QGeoTileSpec)
 .. Slots ..
 evaluateCopyrights()
 updateMapVersion()
}
QGeoTiledMap <-up- QGeoMap
QGeoTiledMap *-- QGeoCameraTiles
QGeoTiledMap *-- QGeoMapScene
QGeoTiledMap *-- QGeoTileCache
QGeoTiledMap *-- QGeoTileRequestManager


class QGeoMap {
 height
 width
 --
 cameraCapabilities()
 changeActiveMapType()
 changeCameraData()
 coordinateToItemPosition()
 itemPositionToCoordinate()
 prefetchData()
 resize()
 setCameraData()
 updateSceneGraph()
 .. Slots ..
 update()
 .. Signals ..
 cameraDataChanged()
 updateRequired()
 activeMapTypeChanged()
 copyrightsChanged()
}
QGeoMap o-- QGeoCameraData
QGeoMap o-- QGeoMapType
QGeoMap *-- QGeoMapController
QGeoMap *-- QGeoMappingManagerEngine


class QGeoMapController {
 pan()
 setAltitude()
 setBearing()
 setCenter()
 setLatitude()
 setLongitude()
 setRoll()
 setTilt()
 setZoom()
 .. Signals ..
 bearingChanged()
 cameraDataChanged()
 centerChanged()
 rollChanged()
 tiltChanged()
 zoomChanged()
}
QGeoMapController o-- QGeoCameraData
QGeoMapController *-- QGeoMap


class QGeoTileCache {
 disk_cache
 memory_cache
 texture_cache
 --
 get(QGeoTileSpec) -> QGeoTileTexture
 insert(QGeoTileSpec, QByteArray, format)
}
QGeoTileCache o-- QCache3Q


class QCache3Q {
 clear()
 deserializeQueue(queueNumber, QList<Key>, QList<QSharedPointer<T> > &values, QList<int> &costs)
 insert(Key, QSharedPointer<T> object, cost)
 object(Key) -> QSharedPointer<T>
 operator[](Key) -> QSharedPointer<T>
 remove(Key)
 serializeQueue(queueNumber, QList<QSharedPointer<T> > &buffer)
 setMaxCost()
 setPromoteAt()
 totalCost()
}


class QGeoCameraTiles {
 prefetchTiles() -> QSet<QGeoTileSpec>
 setCamera()
 setMapType()
 setMapVersion()
 setMaximumZoomLevel()
 setPluginString()
 setScreenSize()
 setTileSize()
 tileSize()
 visibleTiles() -> QSet<QGeoTileSpec>
 .. Private ..
 appendZIntersects()
 clipFootprintToMap()
 createFrustum()
 frustumFootprint()
 splitPolygonAtAxisValue()
 tileIntersections()
 tilesFromPolygon()
 updateGeometry()
 updateMetadata()
}
QGeoCameraTiles o-- QGeoCameraData
QGeoCameraTiles o-- QGeoMapType
QGeoCameraTiles *-- "many" QGeoTileSpec


class QGeoMapScene {
 m_visibleTiles QSet<QGeoTileSpec>
 m_textures QHash<QGeoTileSpec, QGeoTileTexture>>
 --
 addTile(QGeoTileSpec, QGeoTileTexture)
 itemPositionToMercator()
 mercatorToItemPosition()
 newTilesVisible(QSet<QGeoTileSpec>)
 setCameraData()
 setScreenSize()
 setTileSize()
 setUseVerticalLock()
 setVisibleTiles(QSet< QGeoTileSpec>)
 texturedTiles() -> QSet<QGeoTileSpec>
 updateSceneGraph()
 verticalLock()
 .. Private ..
 buildGeometry()
 removeTiles()
 setTileBounds()
 setupCamera()
}
QGeoMapScene o-- QGeoCameraData
QGeoMapScene *-- "many" QGeoTileSpec
QGeoMapScene *-- "many" QGeoTileTexture


class QGeoServiceProvider {
 availableServiceProviders()
 --
 geocodingFeatures() -> GeocodingFeatures
 geocodingManager() -> QGeoCodingManager
 mappingFeatures() -> MappingFeatures
 mappingManager() -> QGeoMappingManager
 placeManager() -> QPlaceManager
 placesFeatures() -> PlacesFeatures
 routingFeatures() ->  RoutingFeatures
 routingManager() -> QGeoRoutingManager
 setLocale()
 setParameters()
 .. Private ..
 loadMeta()
 loadPlugin()
 manager() -> Manager
 unload()
}
QGeoServiceProvider *-- QGeoMappingManager
QGeoServiceProvider *-- QGeoServiceProviderFactory


class QGeoServiceProviderFactoryOsm {
}
QGeoServiceProviderFactoryOsm <-up- QGeoServiceProviderFactory


class QGeoServiceProviderFactory {
 createMappingManagerEngine(parameters, ...) -> QGeoMappingManagerEngine
}


class QGeoMappingManager {
 cameraCapabilities() -> QGeoCameraCapabilities
 createMap() -> QGeoMap
 isInitialized()
 managerName()
 managerVersion()
 setLocale()
 supportedMapTypes() -> QList<QGeoMapType>
 .. Signals ..
 initialized()
}
QGeoMappingManager *-- QGeoMappingManagerEngine


class QGeoTileRequestManager {
 m_engine QGeoTiledMappingManagerEngine
 m_futures QHash<QGeoTileSpec, RetryFuture>
 m_map QGeoTiledMap
 m_requested QSet<QGeoTileSpec>
 m_retries QHash<QGeoTileSpec, int>
 --
 requestTiles(QSet<QGeoTileSpec>) -> QList<QSharedPointer<QGeoTileTexture>>
 tileError(QGeoTileSpec, QString)
 tileFetched(QGeoTileSpec)
 tileTexture(QGeoTileSpec) -> QSharedPointer<QGeoTileTexture>
}
QGeoTileRequestManager *-- QGeoTiledMap
QGeoTileRequestManager *-- QGeoTiledMappingManagerEngine
QGeoTileRequestManager *-- "many" QGeoTileSpec


class QGeoTiledMappingManagerEngineOsm {
}
QGeoTiledMappingManagerEngineOsm <-up- QGeoTiledMappingManagerEngine


class QGeoTiledMappingManagerEngine {
 cacheHint_
 fetcher_ QGeoTileFetcher
 mapHash_ QHash<QGeoTiledMap *, QSet<QGeoTileSpec>>
 tileCache_ QGeoTileCache
 tileHash_ QHash<QGeoTileSpec, QSet<QGeoTiledMap *>>
 tileMaps_ QSet<QGeoTiledMap *>
 tileSize_
 .. Signals ..
 tileError()
 mapVersionChanged()
}
QGeoTiledMappingManagerEngine <-up- QGeoMappingManagerEngine


class QGeoMappingManagerEngine {
 tileSize
 tileMaps -> QSet<QGeoTiledMap *>
 mapHash -> QHash<QGeoTiledMap *, QSet<QGeoTileSpec>>
 tileHash -> QHash<QGeoTileSpec, QSet<QGeoTiledMap *>>
 --
 cameraCapabilities() -> QGeoCameraCapabilities
 createMap() -> QGeoMap
 deregisterMap(QGeoMap)
 isInitialized()
 managerName()
 managerVersion()
 parameters()
 registerMap(QGeoMap)
 setLocale()
 supportedMapTypes() -> QList<QGeoMapType>
 .. Signals ..
 initialized()
}
QGeoMappingManagerEngine *-- QGeoTileCache
QGeoMappingManagerEngine *-- QGeoTileFetcher


class QGeoTileFetcherOsm {
}
QGeoTileFetcherOsm <-up- QGeoTileFetcher


class QGeoTileFetcher {
 queue -> QList<QGeoTileSpec>
 cancelTileRequests(QSet<QGeoTileSpec>)
 finished()
 requestNextTile()
 .. Slots ..
 updateTileRequests(QSet<QGeoTileSpec> &tilesAdded, QSet<QGeoTileSpec> &tilesRemoved)
 .. Signals ..
 tileError(QGeoTileSpec, QString)
 tileFinished(QGeoTileSpec, QByteArray, QString &format)
}


class QGeoCameraCapabilities {
 max_tilt
 max_zoom
 min_tilt
 min_zoom
 supports_bearing
 supports_rolling
 supports_tilting
}


class QGeoCameraData {
 bearing
 center -> QGeoCoordinate
 roll
 tilt
 zoom_level
}


class QGeoTileSpec {
 map_id
 plugin -> QString
 version
 x
 y
 zoom
}


class QGeoTileTexture {
 QGeoTileSpec spec
 QImage image
}


class QGeoMapType {
}

@enduml
